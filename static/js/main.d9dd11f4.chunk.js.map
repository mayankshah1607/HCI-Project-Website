{"version":3,"sources":["Components/ChatMessage.js","Components/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["ChatMessage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onQueryChange","event","setState","Query","target","value","state","Intent","Confidence","Message","_this2","fetch","method","headers","Content-type","body","JSON","stringify","query","then","res","json","data","Score","Action","_this3","react_default","a","createElement","Card","Content","Header","Meta","Description","extra","Input","className","type","placeholder","action","onChange","Button","icon","onClick","onSubmit","Component","ChatScreen","Components_ChatMessage","particleOptions","particles","number","density","enabled","value_area","App","particles_default","params","Components_ChatScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAyDeA,cApDX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA4BJI,cAAgB,SAACC,GACbR,EAAKS,SAAS,CAACC,MAAOF,EAAMG,OAAOC,SA5BnCZ,EAAKa,MAAQ,CACTC,OAAQ,6BACRC,WAAY,GACZC,QAAS,GACTN,MAAO,IANFV,0EAUH,IAAAiB,EAAAd,KACNA,KAAKM,SAAS,CAACK,OAAQ,cACvBI,MAAM,8CAA8C,CAChDC,OAAQ,OACRC,QAAS,CAACC,eAAe,oBACzBC,KAAMC,KAAKC,UAAU,CACjBC,MAAOtB,KAAKU,MAAMH,UAGzBgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACFZ,EAAKR,SAAS,CACVM,WAAY,eAAec,EAAKC,MAAM,IACtChB,OAAQ,WAAWe,EAAKE,OACxBf,QAASa,EAAKb,6CAQlB,IAAAgB,EAAA7B,KACJ,OACI8B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,QAAN,KACAJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,KAAcnC,KAAKU,MAAMC,QACzBmB,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KAAYpC,KAAKU,MAAME,YACvBkB,EAAAC,EAAAC,cAACC,EAAA,EAAKI,YAAN,KAAmBrC,KAAKU,MAAMG,UAE9BiB,EAAAC,EAAAC,cAACC,EAAA,EAAKC,QAAN,CAAcI,OAAK,GACnBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,UAAU,MAAMC,KAAK,OAAOC,YAAY,YAAYC,QAAM,EAACC,SAAU5C,KAAKI,eAC7E0B,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,KAAK,OAAOC,QAAS,kBAAMlB,EAAKmB,eAE5ClB,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,MAAb,6CA/CUS,aCYXC,mLARP,OACIpB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,oBACXV,EAAAC,EAAAC,cAACmB,EAAD,cALSF,wCCInBG,EAAkB,CACtBC,UAAW,CACTC,OAAQ,CACN7C,MAAO,GACP8C,QAAS,CACPC,SAAS,EACTC,WAAY,QAsBLC,mLAdX,OACE5B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OAEbV,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CAAWS,UAAU,YACfoB,OAAQR,IAEdtB,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,SAAd,qCACAV,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,gBAAb,yCAAkEV,EAAAC,EAAAC,cAAA,2BAClEF,EAAAC,EAAAC,cAAC6B,EAAD,cAVUZ,aCREa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECVNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.d9dd11f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Input, Button } from 'semantic-ui-react'\n\nclass ChatMessage extends Component{\n\n    constructor(){\n        super()\n        this.state = {\n            Intent: 'Begin by typing a query...',\n            Confidence: '',\n            Message: '',\n            Query: ''\n        }\n    }\n\n    onSubmit(){\n        this.setState({Intent: 'Loading..'})\n        fetch('https://mayankchatbot.herokuapp.com/predict',{\n            method: 'post',\n            headers: {'Content-type':'application/json'},\n            body: JSON.stringify({\n                query: this.state.Query\n            })\n        })\n        .then(res => res.json())\n        .then(data => {\n            this.setState({\n                Confidence: 'Confidence: '+data.Score+'%',\n                Intent: 'Intent: '+data.Action,\n                Message: data.Message\n            })\n        })\n    }\n\n    onQueryChange = (event) => {\n        this.setState({Query: event.target.value})\n    }\n    render(){\n        return(\n            <Card>\n                <Card.Content>\n                <Card.Header>{this.state.Intent}</Card.Header>\n                <Card.Meta>{this.state.Confidence}</Card.Meta>\n                <Card.Description>{this.state.Message}</Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                <Input className='mb2' type='text' placeholder='Search...' action onChange={this.onQueryChange}>\n                    <input />\n                    <Button icon='send' onClick={() => this.onSubmit()}></Button>\n                </Input>\n                <p className='f6'>Eg: When is the event happening?</p>\n                </Card.Content>\n            </Card>\n        );\n    }\n}\n\nexport default ChatMessage","import React, { Component } from 'react';\nimport ChatMessage from './ChatMessage'\n\n\nclass ChatScreen extends Component{\n    \n    render(){\n        return(\n            <div className='dib mt6 shadow-3'>\n                <ChatMessage/>\n            </div>\n        );\n    }\n}\n\nexport default ChatScreen","import React, { Component } from 'react';\nimport ChatScreen from './Components/ChatScreen.js'\nimport './App.css';\nimport Particles from 'react-particles-js';\n\n\n\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enabled: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Particles className='particles'\n              params={particleOptions}\n            />\n        <h1 className='white'>Question Answering Chatbot System</h1>\n        <p className='white f4 fw4'>Human-Computer Interaction project by <strong>IEEE-VIT</strong></p>\n        <ChatScreen/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}